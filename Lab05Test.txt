/*
Lab05Test.text
Jacob Branson
COSC 1030, Section 01
Lab 05
15 Feb 2022

*/
Comments:

Obviously the double variable type is more accurate. Double provided much more accuracy
and every reciprocal was equal. I would attribute this improvement to the fact that double 
is reporting more then twice as many digits as float. The double stores 64 bits compared to 
a floats 24 bits of storage. This size difference is why double's CMP1 ==1 for every case.
While the float overflows into its leading bit, changing the float to go all over, the double
has ample storage to handle these numbers.

RESULTS FOR Lab05.cpp

Enter the smallest positive integer to use (greater than 0):  1

Enter the largest positive integer (greater than 1):  50

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
     n                 Recip (1/n)                  Sum 1/n n*           CMP 1
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
     1      1.00000000000000000e+00      1.00000000000000000e+00          ==
     2      5.00000000000000000e-01      1.00000000000000000e+00          ==
     3      3.33333333333333315e-01      1.00000000000000000e+00          ==
     4      2.50000000000000000e-01      1.00000000000000000e+00          ==
     5      2.00000000000000011e-01      1.00000000000000000e+00          ==
     6      1.66666666666666657e-01      1.00000000000000000e+00          ==
     7      1.42857142857142849e-01      1.00000000000000000e+00          ==
     8      1.25000000000000000e-01      1.00000000000000000e+00          ==
     9      1.11111111111111105e-01      1.00000000000000000e+00          ==
    10      1.00000000000000006e-01      1.00000000000000000e+00          ==
    11      9.09090909090909116e-02      1.00000000000000000e+00          ==
    12      8.33333333333333287e-02      1.00000000000000000e+00          ==
    13      7.69230769230769273e-02      1.00000000000000000e+00          ==
    14      7.14285714285714246e-02      1.00000000000000000e+00          ==
    15      6.66666666666666657e-02      1.00000000000000000e+00          ==
    16      6.25000000000000000e-02      1.00000000000000000e+00          ==
    17      5.88235294117647051e-02      1.00000000000000000e+00          ==
    18      5.55555555555555525e-02      1.00000000000000000e+00          ==
    19      5.26315789473684181e-02      1.00000000000000000e+00          ==
    20      5.00000000000000028e-02      1.00000000000000000e+00          ==
    21      4.76190476190476164e-02      1.00000000000000000e+00          ==
    22      4.54545454545454558e-02      1.00000000000000000e+00          ==
    23      4.34782608695652162e-02      1.00000000000000000e+00          ==
    24      4.16666666666666644e-02      1.00000000000000000e+00          ==
    25      4.00000000000000008e-02      1.00000000000000000e+00          ==
    26      3.84615384615384637e-02      1.00000000000000000e+00          ==
    27      3.70370370370370350e-02      1.00000000000000000e+00          ==
    28      3.57142857142857123e-02      1.00000000000000000e+00          ==
    29      3.44827586206896547e-02      1.00000000000000000e+00          ==
    30      3.33333333333333329e-02      1.00000000000000000e+00          ==
    31      3.22580645161290314e-02      1.00000000000000000e+00          ==
    32      3.12500000000000000e-02      1.00000000000000000e+00          ==
    33      3.03030303030303039e-02      1.00000000000000000e+00          ==
    34      2.94117647058823525e-02      1.00000000000000000e+00          ==
    35      2.85714285714285705e-02      1.00000000000000000e+00          ==
    36      2.77777777777777762e-02      1.00000000000000000e+00          ==
    37      2.70270270270270285e-02      1.00000000000000000e+00          ==
    38      2.63157894736842091e-02      1.00000000000000000e+00          ==
    39      2.56410256410256401e-02      1.00000000000000000e+00          ==
    40      2.50000000000000014e-02      1.00000000000000000e+00          ==
    41      2.43902439024390252e-02      1.00000000000000000e+00          ==
    42      2.38095238095238082e-02      1.00000000000000000e+00          ==
    43      2.32558139534883718e-02      1.00000000000000000e+00          ==
    44      2.27272727272727279e-02      1.00000000000000000e+00          ==
    45      2.22222222222222231e-02      1.00000000000000000e+00          ==
    46      2.17391304347826081e-02      1.00000000000000000e+00          ==
    47      2.12765957446808505e-02      1.00000000000000000e+00          ==
    48      2.08333333333333322e-02      1.00000000000000000e+00          ==
    49      2.04081632653061208e-02      1.00000000000000000e+00          ==
    50      2.00000000000000004e-02      1.00000000000000000e+00          ==
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
This C++ compiler reports 15 decimal digits for double precision numbers,
also the maximum positive int integer is 2147483647


RESULTS FOR DoTable.cpp

Enter the smallest positive integer to use (greater than 0):  1

Enter the largest positive integer (greater than 1):  50

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
     n        Recip (1/n)         Sum 1/n n*           CMP 1
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
     1      1.00000000e+00      1.00000000e+00          ==
     2      5.00000000e-01      1.00000000e+00          ==
     3      3.33333343e-01      1.00000000e+00          ==
     4      2.50000000e-01      1.00000000e+00          ==
     5      2.00000003e-01      1.00000000e+00          ==
     6      1.66666672e-01      1.00000000e+00          ==
     7      1.42857149e-01      1.00000000e+00          ==
     8      1.25000000e-01      1.00000000e+00          ==
     9      1.11111112e-01      1.00000000e+00          ==
    10      1.00000001e-01      1.00000012e+00           >
    11      9.09090936e-02      1.00000012e+00           >
    12      8.33333358e-02      9.99999881e-01           <
    13      7.69230798e-02      1.00000000e+00          ==
    14      7.14285746e-02      1.00000012e+00           >
    15      6.66666701e-02      1.00000000e+00          ==
    16      6.25000000e-02      1.00000000e+00          ==
    17      5.88235296e-02      1.00000000e+00          ==
    18      5.55555560e-02      1.00000024e+00           >
    19      5.26315793e-02      9.99999821e-01           <
    20      5.00000007e-02      1.00000012e+00           >
    21      4.76190485e-02      1.00000000e+00          ==
    22      4.54545468e-02      1.00000024e+00           >
    23      4.34782617e-02      9.99999821e-01           <
    24      4.16666679e-02      1.00000012e+00           >
    25      3.99999991e-02      1.00000012e+00           >
    26      3.84615399e-02      1.00000036e+00           >
    27      3.70370373e-02      9.99999762e-01           <
    28      3.57142873e-02      9.99999821e-01           <
    29      3.44827585e-02      1.00000012e+00           >
    30      3.33333351e-02      1.00000036e+00           >
    31      3.22580636e-02      9.99999523e-01           <
    32      3.12500000e-02      1.00000000e+00          ==
    33      3.03030312e-02      9.99999523e-01           <
    34      2.94117648e-02      1.00000048e+00           >
    35      2.85714287e-02      1.00000000e+00          ==
    36      2.77777780e-02      1.00000036e+00           >
    37      2.70270277e-02      9.99999821e-01           <
    38      2.63157897e-02      1.00000024e+00           >
    39      2.56410260e-02      1.00000000e+00          ==
    40      2.50000004e-02      9.99999583e-01           <
    41      2.43902430e-02      9.99999583e-01           <
    42      2.38095243e-02      1.00000060e+00           >
    43      2.32558139e-02      1.00000024e+00           >
    44      2.27272734e-02      9.99999642e-01           <
    45      2.22222228e-02      1.00000000e+00          ==
    46      2.17391308e-02      9.99999821e-01           <
    47      2.12765951e-02      9.99999940e-01           <
    48      2.08333340e-02      9.99999583e-01           <
    49      2.04081628e-02      9.99999702e-01           <
    50      1.99999996e-02      9.99999583e-01           <
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
This C++ compiler reports 6 decimal digits for float precision numbers,
also the maximum positive int integer is 2147483647